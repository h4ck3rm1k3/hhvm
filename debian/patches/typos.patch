Description: Lots of typos.
 Lots of typos, most of them detected by lintian. Added the false positives
 to a lintian override file.
Author: David Mart√≠nez Moreno <ender@debian.org>
Forwarded: no
Last-Update: 2014-03-12

--- a/hphp/doc/options.compiler
+++ b/hphp/doc/options.compiler
@@ -207,7 +207,7 @@
 
 = GCCOptimization
 
-Default is disabled. This option allows to selectively decrease the compiler
+Default is disabled. This option allows one to selectively decrease the compiler
 optimization level for long functions. It is specified as:
 
   GCCOptimization {
--- a/hphp/neo/neo_hdf.c
+++ b/hphp/neo/neo_hdf.c
@@ -1482,7 +1482,7 @@
     if (*s == '\0' || k_l == 0)
     {
       _dealloc_hdf_attr(attr);
-      return nerr_raise(NERR_PARSE, "Misformed attribute specification: %s", *str);
+      return nerr_raise(NERR_PARSE, "Malformed attribute specification: %s", *str);
     }
     SKIPWS(s);
     if (*s == '=')
@@ -1537,7 +1537,7 @@
 	{
 	  _dealloc_hdf_attr(attr);
 	  string_clear(&buf);
-	  return nerr_raise(NERR_PARSE, "Misformed attribute specification: %s", *str);
+	  return nerr_raise(NERR_PARSE, "Malformed attribute specification: %s", *str);
 	}
 	s++;
 	v = buf.buf;
@@ -1550,7 +1550,7 @@
 	if (*s == '\0')
 	{
 	  _dealloc_hdf_attr(attr);
-	  return nerr_raise(NERR_PARSE, "Misformed attribute specification: %s", *str);
+	  return nerr_raise(NERR_PARSE, "Malformed attribute specification: %s", *str);
 	}
         v_l = s-v;
       }
@@ -1591,7 +1591,7 @@
   if (*s == '\0')
   {
     _dealloc_hdf_attr(attr);
-    return nerr_raise(NERR_PARSE, "Misformed attribute specification: %s", *str);
+    return nerr_raise(NERR_PARSE, "Malformed attribute specification: %s", *str);
   }
   *str = s+1;
   return STATUS_OK;
--- a/hphp/system/php/spl/iterators/ArrayIterator.php
+++ b/hphp/system/php/spl/iterators/ArrayIterator.php
@@ -4,7 +4,7 @@
 /**
  * ( excerpt from http://docs.hhvm.com/manual/en/class.arrayiterator.php )
  *
- * This iterator allows to unset and modify values and keys while
+ * This iterator allows one to unset and modify values and keys while
  * iterating over Arrays and Objects.
  *
  * When you want to iterate over the same array multiple times you need to
--- a/hphp/system/php/spl/iterators/RecursiveArrayIterator.php
+++ b/hphp/system/php/spl/iterators/RecursiveArrayIterator.php
@@ -5,7 +5,7 @@
  * ( excerpt from http://docs.hhvm.com/manual/en/class.recursivearrayiterator.php
  * )
  *
- * This iterator allows to unset and modify values and keys while
+ * This iterator allows one to unset and modify values and keys while
  * iterating over Arrays and Objects in the same way as the ArrayIterator.
  * Additionally it is possible to iterate over the current iterator entry.
  *
--- a/hphp/test/zend/bad/ext/mbstring/tests/htmlent.php
+++ b/hphp/test/zend/bad/ext/mbstring/tests/htmlent.php
@@ -4,7 +4,7 @@
 // &#64... are must be decoded on input these are not reencoded on output. 
 // If you see &#64;&#65;&#66; on output this means input encoding fails.
 // If you do not see &auml;... on output this means output encoding fails.
-// Using UTF-8 internally allows to encode/decode ALL characters.
+// Using UTF-8 internally allows one to encode/decode ALL characters.
 // &128... will stay as they are since their character codes are above 127
 // and they do not have a named entity representaion.
 ?>
--- a/hphp/runtime/ext/icu/ext_icu_rsrc_bundle.cpp
+++ b/hphp/runtime/ext/icu/ext_icu_rsrc_bundle.cpp
@@ -18,7 +18,7 @@
                             const icu::ResourceBundle& bundle) {
 #define EXTRACT_ERR(type) \
   if (U_FAILURE(error)) { \
-    data->setError(error, "Failed to retreive " #type " value"); \
+    data->setError(error, "Failed to retrieve " #type " value"); \
     return init_null(); \
   }
 

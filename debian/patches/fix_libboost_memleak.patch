Description: prevent use of libboost flat_set on certain versions.
 A series of versions of libboost (including the one in Ubuntu trusty) have a buggy 
 flat_set that will leak a sizeable amount of memory.
Author: Josh Watzman <jwatzman@fb.com>
Last-Update: 2014-12-12
Origin: backport, https://github.com/facebook/hhvm/issues/4268

---
 hphp/runtime/vm/jit/containers.h | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/hphp/runtime/base/smart-containers.h b/hphp/runtime/base/smart-containers.h
index af5793b..e501991 100644
--- a/hphp/runtime/base/smart-containers.h
+++ b/hphp/runtime/base/smart-containers.h
@@ -26,8 +26,10 @@
 #include <unordered_map>
 #include <unordered_set>
 #include <vector>
+#include <set>
 
 #include <boost/container/flat_map.hpp>
+#include <boost/version.hpp>
 #include <limits>
 #include <list>
 #include <set>
diff --git a/hphp/runtime/vm/jit/containers.h b/hphp/runtime/vm/jit/containers.h
index 0d65eba..2ebcd31 100644
--- a/hphp/runtime/vm/jit/containers.h
+++ b/hphp/runtime/vm/jit/containers.h
@@ -19,6 +19,8 @@
 
 #include "hphp/runtime/base/smart-containers.h"
 #include <memory>
+#include <set>
+#include <boost/version.hpp>
 
 namespace HPHP {
 namespace jit {
@@ -51,7 +53,21 @@ template<class T>
 using unique_ptr = std::unique_ptr<T>;
 
 template<class K, class Pred = std::less<K>>
+#if defined(BOOST_VERSION) && BOOST_VERSION > 105100 && BOOST_VERSION < 105500
+// There's some leak in boost's flat_set that caused serious memory problems to
+// be reported externally: https://github.com/facebook/hhvm/issues/4268. The
+// bug looks to be https://svn.boost.org/trac/boost/ticket/9166 but it's not
+// totally clear. There were a ton of leaks fixed in 1.55 -- but FB is using
+// 1.51 internally and we aren't hitting the leak. So also unclear where it was
+// *introduced*. So for now just picking those two bounds; they may need to be
+// adjusted with future reports.
+//
+// It sounds like the leak might affect other boost containers as well, but we
+// only definitively observed it mattering for flat_set.
+using flat_set = std::set<K, Pred>;
+#else
 using flat_set = boost::container::flat_set<K, Pred>;
+#endif
 
 template<class K, class V, class Pred = std::less<K>>
 using flat_map = boost::container::flat_map<K,V,Pred>;
